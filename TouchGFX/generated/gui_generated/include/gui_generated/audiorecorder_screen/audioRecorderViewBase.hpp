/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUDIORECORDERVIEWBASE_HPP
#define AUDIORECORDERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/audiorecorder_screen/audioRecorderPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/mixins/ClickListener.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class audioRecorderViewBase : public touchgfx::View<audioRecorderPresenter>
{
public:
    audioRecorderViewBase();
    virtual ~audioRecorderViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void startRecord()
    {
        // Override and implement this function in audioRecorder
    }
    virtual void stopRecord()
    {
        // Override and implement this function in audioRecorder
    }
    virtual void startSaving()
    {
        // Override and implement this function in audioRecorder
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::ButtonWithIcon startRecordButton;
    touchgfx::ButtonWithIcon stopRecordButton;
    touchgfx::ButtonWithIcon saveButton;
    touchgfx::ClickListener< touchgfx::Image > image2;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextArea textArea2;
    touchgfx::TextAreaWithOneWildcard textArea3;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 15;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t TEXTAREA3_SIZE = 16;
    touchgfx::Unicode::UnicodeChar textArea3Buffer[TEXTAREA3_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<audioRecorderViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // AUDIORECORDERVIEWBASE_HPP
