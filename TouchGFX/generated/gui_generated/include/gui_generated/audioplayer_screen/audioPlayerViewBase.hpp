/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUDIOPLAYERVIEWBASE_HPP
#define AUDIOPLAYERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/audioplayer_screen/audioPlayerPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>

class audioPlayerViewBase : public touchgfx::View<audioPlayerPresenter>
{
public:
    audioPlayerViewBase();
    virtual ~audioPlayerViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void volumeChanged(int value)
    {
        // Override and implement this function in audioPlayer
    }
    virtual void muteFunction()
    {
        // Override and implement this function in audioPlayer
    }
    virtual void disFileList()
    {
        // Override and implement this function in audioPlayer
    }
    virtual void playFunction()
    {
        // Override and implement this function in audioPlayer
    }
    virtual void pauseFunction()
    {
        // Override and implement this function in audioPlayer
    }
    virtual void stopFunction()
    {
        // Override and implement this function in audioPlayer
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::Image image2;
    touchgfx::Slider VolumeSlider;
    touchgfx::TextAreaWithOneWildcard volumeText;
    touchgfx::TextArea titleText;
    touchgfx::TextAreaWithOneWildcard fileSizeText;
    touchgfx::TextAreaWithOneWildcard sampleRateText;
    touchgfx::TextAreaWithOneWildcard errorText;
    touchgfx::Button fileSelectButton;
    touchgfx::TextAreaWithOneWildcard nowFileText;
    touchgfx::ButtonWithLabel playButton;
    touchgfx::ButtonWithLabel pauseButton;
    touchgfx::ButtonWithLabel stopButton;
    touchgfx::ButtonWithLabel muteButton;
    touchgfx::ScrollableContainer waveFileList;
    touchgfx::ListLayout fileList;

    /*
     * Wildcard Buffers
     */
    static const uint16_t VOLUMETEXT_SIZE = 4;
    touchgfx::Unicode::UnicodeChar volumeTextBuffer[VOLUMETEXT_SIZE];
    static const uint16_t FILESIZETEXT_SIZE = 6;
    touchgfx::Unicode::UnicodeChar fileSizeTextBuffer[FILESIZETEXT_SIZE];
    static const uint16_t SAMPLERATETEXT_SIZE = 6;
    touchgfx::Unicode::UnicodeChar sampleRateTextBuffer[SAMPLERATETEXT_SIZE];
    static const uint16_t ERRORTEXT_SIZE = 16;
    touchgfx::Unicode::UnicodeChar errorTextBuffer[ERRORTEXT_SIZE];
    static const uint16_t NOWFILETEXT_SIZE = 34;
    touchgfx::Unicode::UnicodeChar nowFileTextBuffer[NOWFILETEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<audioPlayerViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<audioPlayerViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // AUDIOPLAYERVIEWBASE_HPP
